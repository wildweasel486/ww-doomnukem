/*==============================================================================
	Special Ammo Conditions Event
	Developed by Major Cooke
	
This is designed for ammo conditions based on certain weapon spawns, so far for
the Revolver and BFG.
==============================================================================*/

#include "./zpreprocessor.zsc"

// We use a static handler here because it transfers across map transitions, allowing
// for replacing properly so hacks aren't used. Remember, TID/action/etc are assigned
// the moment something is spawned, so you want this performed BEFORE that happens!
Class DNBFGHandler : StaticEventHandler
{
	bool 	BFGSpawned,
			RevolverSpawned;
			
	private Array<Actor> 
			BFGs,
			Revolvers;
			
	private Array<DNThingsToSpawn> Spawns;
	
	// Shortcut for ensuring the handler found is *always* of the proper type.
	// let event = DNBFGHandler.Fetch();
	static clearscope DNBFGHandler Fetch()
	{
		return DNBFGHandler(Find("DNBFGHandler"));
	}
	
	// Normal map spawning, useful for when BFGs are spawned in via 
	override void WorldThingSpawned(WorldEvent e)
	{
		if (e.thing is 'BFG9000' || e.thing is 'DNBFG')
		{
			BFGSpawned = true;
			BFGs.Push(e.Thing);
		}
		else if (e.thing is 'Revolver')
		{
			RevolverSpawned = true;
			Revolvers.Push(e.Thing);
		}
	}
	
	// Here's the main checker. Call this to check for BFGs.
	bool CheckBFGs()
	{
		if (BFGSpawned)	return true;
		for (int i = 0; i < BFGs.Size(); i++)
		{
			let mo = BFGs[i];
			if (mo)	
			{
				BFGSpawned = true;
				return true;
			}
		}
		return BFGSpawned; // Handle corner case to ensure BFG ammo spawns.
	}
	
	bool CheckRevolvers()
	{
		if (RevolverSpawned)	return true;
		for (int i = 0; i < Revolvers.Size(); i++)
		{
			let mo = Revolvers[i];
			if (mo)
			{
				RevolverSpawned = true;
				return true;
			}
		}
		return RevolverSpawned;
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		if (e.IsSaveGame)
			return;
		
		// Just some book keeping, dont mind this.
		Array<Actor> temp; temp.Clear();
		
		for (int i = 0; i < BFGs.Size(); i++)
		{	if (BFGs[i])	temp.Push(BFGs[i]);		}
		BFGs.Move(temp);
		
		for (int i = 0; i < Revolvers.Size(); i++)
		{	if (Revolvers[i])	temp.Push(Revolvers[i]);		}
		Revolvers.Move(temp);
		
		// Don't spawn anything on re-entering a hub map.
		if (e.IsReopen)
		{
			Spawns.Clear();
			return;
		}
		
		// Spawn the things.
		for (int i = 0; i < Spawns.Size(); i++)
		{
			Actor.Spawn(Spawns[i].Thing, Spawns[i].pos, ALLOW_REPLACE);
		}
		Spawns.Clear();
	}
	
	void AddSpawn(Class<Actor> th, Vector3 p)
	{
		let list = DNThingsToSpawn.Create(th, p);
		if (list)	Spawns.Push(list);
	}
		
	// If the player misses the BFG, it doesn't make sense to spawn ammo.
	override void WorldUnloaded(WorldEvent e)
	{
		BFGSpawned = false;
		RevolverSpawned = false;
	}
	
	// New game so naturally set this off.
	override void NewGame()
	{
		BFGs.Clear();
		Spawns.Clear();
		BFGSpawned = RevolverSpawned = false;
	}
	
	// REPLACEMENTS! Comment out if you wish to continue using the 'replaces' keyword
	// or if too confusing.
	// Has higher priority over 'Replaces' keyword.
	override void CheckReplacement(ReplaceEvent e)
	{
		Class<Actor> rep = e.Replacee;
		if (!rep)	return;
		
		Name repn = rep.GetClassName();
		if (rep is 'Inventory')
		{
			Switch(repn)
			{
				Case 'Clip':
				{
					if (CheckRevolvers())	e.Replacement = 'DNClipSpawnerRevolver';
					else					e.Replacement = 'DNClipSpawnerNoRevolver';
					return;
				}
				Case 'BFG9000':		e.Replacement = 'DNBFG';	return;
				Case 'CellPack':
				{
					e.Replacement = 'ChaingunAmmo';
					if (CheckBFGs() && random(1,3) <= 1)	
						e.Replacement = 'BFGCell';	
					return;
				}
			}
		}
	}

	// So GetReplacee works and points to their appropriate type.
	// Syntax is as follows.
	// Case '<replacement name': e.Replacee = '<Replaced actor name>';	return;
	override void CheckReplacee(ReplacedEvent e)
	{
		Name rep = e.Replacement.GetClassName();
		Switch(rep)
		{
			Case 'Revolver':				e.Replacee = 'Chainsaw';	return;
			Case 'BFG9000':					e.Replacee = 'DNBFG';		return;
			
			Case 'ChaingunAmmo': 			// Treat the same as CellPack.
			Case 'BFGCell':					e.Replacee = 'CellPack';	return;
			
			Case 'DNClipSpawnerRevolver':	
			Case 'DNClipSpawnerNoRevolver':	
			Case 'RevolverAmmo':
			Case 'DNPistolAmmoPickup':
											e.Replacee = 'Clip';		return;
		}
	}
}

Class DNClipSpawnerNoRevolver : RandomSpawner
{
	Default
	{
		DropItem "DNPistolAmmoPickup",	256, 48;
		DropItem "Revolver", 			256, 2;
		DropItem "DNDualPistolPickup",		256, 1;
	}
}
Class DNClipSpawnerRevolver : RandomSpawner
{
	Default
	{
		DropItem "DNPistolAmmoPickup",	256, 64;
		DropItem "RevolverAmmoPickup",		256, 8;
		DropItem "Revolver", 			256, 1;
		DropItem "DNDualPistolPickup",		256, 2;
	}
}

Class DNThingsToSpawn play
{
	Class<Actor> Thing;
	Vector3 pos;
	
	static DNThingsToSpawn Create(Class<Actor> th, Vector3 p)
	{
		if (!th)	return null;
		let s = new('DNThingsToSpawn');
		s.Thing = th;
		s.pos = p;
		return s;
	}
}
/*
// Gets a random spawner and returns a random selection based on the class type
// provided.
Class DNRSGenerator play
{
	static Name Get(Class<RandomSpawner> cls)
	{
		if (!cls)	return 'None';
		
		let def = GetDefaultByType(cls);
		int RecursionCount = RandomSpawner.MAX_RANDOMSPAWNERS_RECURSION;
		
		if (def)
		{
			// Copied from RandomSpawner
			DropItem di;   // di will be our drop item list iterator
			DropItem drop; // while drop stays as the reference point.
			int n = 0;

			drop = di = GetDropItems();
			
			while (di != null)
			{
				bool shouldSkip = (di.Name == 'None'));
				
				if (!shouldSkip)
				{
					int amt = di.Amount;
					if (amt < 0) amt = 1; // default value is -1, we need a positive value.
					n += amt; // this is how we can weight the list.
				}

				di = di.Next;
			}
			
			if (n == 0) // Nothing left to spawn. They must have all been monsters, and monsters are disabled.
				return 'None';
			
			// Then we reset the iterator to the start position...
			di = drop;
			// Take a random number...
			n = random[randomspawn](0, n-1);
			// And iterate in the array up to the random number chosen.
			while (n > -1 && di != null)
			{
				if (di.Name != 'None')
				{
					int amt = di.Amount;
					if (amt < 0) amt = 1;
					n -= amt;
					if ((di.Next != null) && (n > -1))
						di = di.Next;
					else
						n = -1;
				}
				else
				{
					di = di.Next;
				}
			}
			return di.Name;
		}
		return 'None';
	}
}*/
